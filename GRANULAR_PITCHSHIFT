/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// MY FUNCTIONS //////////////////////////////////////////////
#define byte unsigned char


static unsigned long int next = 1;

int rand(void) // RAND_MAX assumed to be 32767
{
    next = next * 1103515245 + 12345;
    return (unsigned int)(next/65536) % 32768;
}




// US DELAY
void delayus (uint16_t us)
{
__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
}


// DMA
volatile byte adcResultsDMA [4];
const int adcChannelCount = sizeof (adcResultsDMA) / sizeof (adcResultsDMA[0]);
volatile int adcConversionComplete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
adcConversionComplete = 1;
}


byte sample;
byte output;

uint16_t  samplerate;

uint16_t stretchpot;

float stretch;
byte randomstretch;

byte delaybuffer[23001];
#define ACTUALMAX 23000
uint16_t MAXDELAY = 23000;

byte delaybuffer2[40001];
#define ACTUALMAX2 40000
uint16_t MAXDELAY2 = 40000;


#define MAXTAP 4000

uint16_t waddress = 0;
uint16_t raddress = 0;
uint16_t wadsave;
uint16_t radsave;
uint16_t wadrand;

uint16_t waddress2 = 0;
uint16_t raddress2 = 0;

uint16_t dummy = 1;
byte dum[2];


uint16_t switchpoint;
uint16_t lastswitch;				// for fades

uint16_t rate = 1000;				// how long tap periods/stretches last

uint16_t grainsize;



uint32_t previousTap = 0;
uint32_t currentTap = 0;

uint32_t currentBounce = 0;
uint32_t previousBounce = 0;

uint32_t currentMillis = 0;
uint32_t previousMillis = 0;

uint32_t currentFtsw = 0;
uint32_t previousFtsw = 0;


uint32_t currentLED = 0;
uint32_t previousLED = 0;

byte firststretch = 0;

// fade
//int output2;		// 0 is DC bias
byte fademaybe = 0;

byte output2;

byte pitch;			// pitch pot experiment
byte reccount = 0;
byte playcount = 0;

uint32_t currentGrain = 0;
uint32_t previousGrain = 0;
uint32_t currentLength = 0;
uint32_t previousLength = 0;
uint32_t length;
uint16_t lastraddress;

// tap
byte pressed = 0;
byte debouncing = 0;
byte debouncing2 = 0;

// modes and loop
byte mode = 0;				// 0 = free play, 1 = loop
byte state = 0;				// 0 = idle, 1 = rec, 2 = play
byte fpressed = 0;
uint16_t loopend;

uint16_t delayyy;

byte change = 0;			// to trigger re-poisition at tap intervals
byte stretching = 0;		// when stretch already happening
byte stretchcount = 0;		// counting stretch cycles
byte stretchno;				// number of cycles to reach

byte outputboth;

void tap ()
{
	 ///// TAP /////

	 if(HAL_GPIO_ReadPin(footswitch_GPIO_Port, footswitch_Pin) == GPIO_PIN_RESET && !debouncing && !pressed && !debouncing2)		// if tap pressed for first time
	 {

		  reccount = 0;
		  playcount = 0;
		  currentGrain = previousGrain = HAL_GetTick();						// reset grain counter

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);						// led ON

		  currentTap = HAL_GetTick();
		  if(currentTap - previousTap <= MAXTAP)							// only store new tap period if under 2 MAXTAP
		  {
			  rate = currentTap - previousTap;
			  firststretch = 1;												// DO STUFF

			  change = 1;

		  }
		  currentMillis = HAL_GetTick();
		  previousMillis = currentMillis;
		  previousTap = currentTap;
		  debouncing = 1;
	  }
	  currentTap = HAL_GetTick();
	  if((currentTap - previousTap >= 40) && debouncing)					// de-bounce press after 40ms
	  {
		  debouncing = 0;
		  pressed = 1;
	  }
	  if(HAL_GPIO_ReadPin(footswitch_GPIO_Port, footswitch_Pin) == GPIO_PIN_SET && !debouncing2 && pressed)		// if tap released for first time
	  {
		  debouncing2 = 1;
		  currentBounce = HAL_GetTick();
		  previousBounce = currentBounce;
	  }
	  currentBounce = HAL_GetTick();
	  if((currentBounce - previousBounce >= 40) && debouncing2)				// de-bounce press and release after 40ms
	  {
		  debouncing2 = 0;
		  pressed = 0;
	  }
	  currentMillis = HAL_GetTick();
	  if(currentMillis - previousMillis > rate)								// rate cycle complete,
	  {
		  reccount = 0;
		  playcount = 0;
		  currentGrain = previousGrain = HAL_GetTick();						// reset grain counter


		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);						// led ON

		  firststretch = 1;													// DO STUFF

		  change = 1;

		  currentMillis = HAL_GetTick();
		  previousMillis = currentMillis;

	  }
	  if(currentMillis - previousMillis > 50)
  	  {
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);						// LED off
  	  }
}



void LEDflash()
{
	currentLED = HAL_GetTick();
	if(currentLED - previousLED > 80)
	{
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);	// toggle LED
		 previousLED = currentLED;
	}
}


void FTSW()											// for LOOPER
{
	  currentFtsw = HAL_GetTick();									// foot switch
	  if(currentFtsw - previousFtsw > 20)
	  {
		  if(HAL_GPIO_ReadPin(footswitch_GPIO_Port, footswitch_Pin) == GPIO_PIN_RESET && !fpressed)		// foot switch pressed
		  {
			  if(!state)											// REC now
			  {
				  state = 1;
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
				  waddress2 = 0;
				  raddress2 = 0;
				  previousLED = currentLED = currentFtsw;			// reset flashy LED timer (to get tick)

			  }
			  else if(state == 1)									// PLAY now
			  {
				  loopend = waddress2;
				  state = 2;
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
				  //switchpoint = grainsize;
				  previousGrain = currentGrain = HAL_GetTick();
			  }
			  else if(state == 2)									// STOP now
			  {
				  state = 0;
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
			  }
			  fpressed = 1;
		  }
		  else if(HAL_GPIO_ReadPin(footswitch_GPIO_Port, footswitch_Pin) == GPIO_PIN_SET && fpressed)	// foot switch released
		  {
			  fpressed = 0;
		  }
		  previousFtsw = currentFtsw;
	  }
	  // Foot switch END
}



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_TIM3_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);									// delay us timer start

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);				// LED off to begin
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

while(1)	// normal play
{
	  // DMA
	  HAL_ADC_Start_DMA(&hadc1, (byte*) adcResultsDMA, adcChannelCount);
	  while(adcConversionComplete == 0)
	  {} adcConversionComplete = 0;

	  sample = adcResultsDMA[0];

//	  FTSW();	// for looper




	  // NORMAL PLAY MODE
	  if(state != 2)
	  {													// RECORD
		  if(reccount >= 17)
		  {

			  delaybuffer[waddress] = sample;				// constantly record to both buffers in state 0 and 1
			  if(waddress >= MAXDELAY) waddress = 0;
			  else waddress++;

			  delaybuffer2[waddress2] = output;				// "output" records output to loop, "sample" records input (dry) to loop

			  if(waddress2 >= MAXDELAY2) waddress2 = 0;
			  else waddress2++;

			  if(state == 1)
				  LEDflash();

			  reccount = 0;
		  }
		  else reccount++;

		  	  	  	  	  	  	  	  	  	  	  		// PLAY
		  if(playcount >= pitch)
		  {
			  output = delaybuffer[raddress];
			  if(mode)												// forwards increment
			  {
				  if(raddress >= MAXDELAY) raddress = 0;
				  else raddress++;
			  }
			  if(!mode)												// reverse increment
			  {
				  if(raddress == 0) raddress = MAXDELAY;
				  else raddress--;
			  }


			  currentGrain = HAL_GetTick();
			  if(currentGrain - previousGrain > grainsize )					// grain cycle complete
			  {
				  grainsize = (adcResultsDMA[1] << 1) + 30;
				  pitch = (adcResultsDMA[2] >> 4) + 8;						// 8 to 24
				  mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);				// read direction toggle




				  if(pitch < 16)											// higher pitches
					  delayyy = (30 + grainsize - pitch) * 4;				// algorithm to reposition r-address
				  else if (pitch == 16)										// neutral pitch
				  {
					  pitch = 17;
					  delayyy = 0;
				  }
				  else														// lower pitches
				  {
					  delayyy = 0;
					  pitch = (pitch + ((pitch - 16)<<1)) - 2; 				// calibrate lower pitches
				  }

				  if(mode)													// increment forwards
				  {
					  if(waddress < delayyy)
						  raddress = MAXDELAY - (delayyy - waddress);
					  else raddress = waddress - delayyy;
				  }
				  else														// increment reverse
				  {
					  if(waddress)
						  raddress = waddress - 1;							// if waddress isn't zero
					  else raddress = MAXDELAY;
				  }

				  previousGrain = currentGrain;								// reset grain counter
			  }

			  playcount = 0;
			  
			  TIM2->CCR1 = output;				 							// write output
		  }

		  else playcount++;
	  }




	  else if(state == 2)		// PLAYING LOOP
	  {
		  if(reccount >= 17)
		  {

			  if(mode)
			  {
				  if(waddress2 >= loopend) waddress2 = 0;
				  else waddress2++;

				  if(waddress >= MAXDELAY) waddress = 0;
				  else waddress++;

			  }
			  else if(!mode)
			  {
				  if(waddress2 == 0) waddress2 = loopend;
				  else waddress2--;

				  if(waddress == 0) waddress = MAXDELAY;
				  else waddress--;
			  }

			  reccount = 0;
		  }
		  else reccount++;


		  //play
		  if(playcount >= pitch)
		  {
			  output2 = (delaybuffer2[raddress2] + delaybuffer[raddress]) >> 1;
			  if(mode)
			  {
				  if(raddress2 >= loopend) raddress2 = 0;
				  else raddress2++;

				  if(raddress >= MAXDELAY) raddress = 0;
				  else raddress++;

			  }
			  if(!mode)
			  {
				  if(raddress2 == 0) raddress2 = loopend;
				  else raddress2--;

				  if(raddress == 0) raddress = MAXDELAY;
				  else raddress--;
			  }

			  // re-position raddress etc
			  currentGrain = HAL_GetTick();
			  if(currentGrain - previousGrain >= grainsize)
			  {
				  grainsize = adcResultsDMA[1] + 30;

				  pitch = (adcResultsDMA[2] >> 4) + 8;			// 8 to 24




				  if(pitch < 16)
					  delayyy = (grainsize - pitch) * 2;						// algorithm to reposition r-address
				  else if (pitch == 16)
				  {
					  pitch = 17;
					  delayyy = 0;
				  }
				  else
				  {
					  delayyy = 0;
					  pitch = (pitch + ((pitch - 16)<<1)) - 1;
				  }

				  if(mode)
				  {
					  if(waddress2 < delayyy)
						  raddress2 = loopend - (delayyy - waddress2);		//	equation  to fix rollover
					  else raddress2 = waddress2 - delayyy;
				  }
				  else // reverse
				  {
					  if(waddress2)
						  raddress2 = waddress2 - 1;							// if waddress isn't zero
					  else raddress2 = loopend;
				  }

				  previousGrain = currentGrain;

				  mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);

			  }

			  playcount = 0;
			  // set output
			  TIM2->CCR1 = output2;				// // write output
		  }

		  else playcount++;

	  }


}




    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 65000;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 50;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 255;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 83;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 83;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : footswitch_Pin */
  GPIO_InitStruct.Pin = footswitch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(footswitch_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
